package com.demo.inter.stack;

public class StackUsingLinkedList {

	public StackNode root;

	public static void main(String[] args) {
		StackUsingLinkedList stack = new StackUsingLinkedList();
		stack.push(4);
		stack.push(5);
		stack.push(3);
		//stack.push(4);
		stack.printStack(stack);
		//stack.reverseStack();
		//stack.printStack(stack);
		StackUsingLinkedList sorted= stack.sortStack(stack);
		stack.printStack(sorted);
		
	}

	public void push(int data) {
		StackNode newNode = new StackNode(data);

		if (null == root) {
			root = newNode;
		} else {
			StackNode temp = root;
			root = newNode;
			root.next = temp;
		}
	}

	public Integer pop() {
		if (null == root) {
			System.out.println("empty stack");
			return 0;
		} else {
			int popped = root.data;
			root.next = root;
			return popped;
		}
	}

	public void printStack(StackUsingLinkedList stack) {
		StackNode sn = stack.root;
		while (sn != null) {
			System.out.println(sn.data);
			sn = sn.next;
		}
	}

	public boolean isEmpty() {
		if (root == null) {
			return true;
		} else {
			return false;
		}

	}

	public void reverseStack() {
		if (this.isEmpty()) {
			return;
		}
		// Remove bottom element from stack
		int bottom = popBottom();

		// Reverse everything else in stack
		reverseStack();

		// Add original bottom element to top of stack
		this.push(bottom);
	}

	private int popBottom() {
		int top = this.pop();
		if (this.isEmpty()) {
			// If we removed the last element, return it
			return top;
		} else {
			// We didn't remove the last element, so remove the last element from what
			// remains
			int bottom = popBottom();
			// Since the element we removed in this function call isn't the bottom element,
			// add it back onto the top of the stack where it came from
			this.push(top);
			return bottom;
		}
	}

	private StackUsingLinkedList sortStack(StackUsingLinkedList input) {
		StackUsingLinkedList tempStack = new StackUsingLinkedList();
		while (input.root != null) {
			int data = input.pop();
			if (tempStack.root == null) {
				tempStack.push(data);

			} else {
				// sorting order
				if (tempStack.root.data < data) {
					tempStack.push(data);
				} else {
					StackNode sn = tempStack.root;
					while (sn.next != null) {
						if(root.next.data<data) {
							StackNode next = sn.next;
							sn.next= new StackNode(data);
							sn.next.next=next;
							break;
						}else {
							sn = sn.next;
						}
					}
				}
			}
		}
		return tempStack;
	}
}
